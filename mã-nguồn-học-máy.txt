from __future__ import division, print_function, unicode_literals
import tkinter as tk
import pandas as pd
from tkinter import messagebox
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, KFold, RepeatedKFold, crossvalscore

from numpy import *
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import BaggingRegressor


df = pd.read_csv("data.csv", delimiter=',')
#define predictor and response variables
X = df[['SoPhong', 'DienTich', 'KhoangCach']].values.reshape(-1,3)
Y = df['Gia']
#Splitting the data into Train and Test
model = LinearRegression()
xtrain, xtest, ytrain, ytest = train_test_split(X,Y,test_size=0.3, random_state=0)
model.fit(xtrain, ytrain)
pred = model.predict(xtest)
master = tk.Tk()
master.title("Bài tập lớn")
master.geometry(“600x150”)
tk.Label(master, text="Nhập thông số liên quan để dự đoán: ").grid(row=0, column=0)
tk.Label(master, text="Số phòng trong căn chung cư").grid(row=1, column=0)
tk.Label(master, text="Diện tích của căn chung cư").grid(row=1, column=1)
tk.Label(master, text="Khoảng cách đên trung tâm thành phố").grid(row=1, column=2)
e1 = tk.Entry(master)
e2 = tk.Entry(master)
e3 = tk.Entry(master)
e1.grid(row=2, column=0)
e2.grid(row=2, column=1)
e3.grid(row=2, column=2)
tk.Label(master, text="Chọn chức năng:").grid(row=3)
def duDoan():
    
    check1=e1.get()
    check2=e2.get()
    check3=e3.get()
    if(check1 == "" or check2 == "" or check3== "" or float(check1) <=0 or float(check2) <=0 or float(check3) <=0 or):
        messagebox.showerror("Error", "Vui long nhập đúng thông số.")
    else:
        bien1 = float(check1)
        bien2 = float(check2)
        bien3 = float(check3)
        kqDuDoan = model.predict([[bien1,bien2,bien3]])
    messagebox.showinfo( "Kết quả dự đoán","Dự đoán giá của căn chung cư có "+str(bien1)+" phòng ngủ, diện tích "+str(bien2)+" mét vuông và cách trung tâm thành phố "+str(bien3)+" là"+str(kqDuDoan)+" tỷ VND")
tk.Button(master, 
          text='Dự đoán', 
          command=duDoan).grid(row=4, 
                                    column=0, 
                                    sticky=tk.W,
                                    pady=4)

def pthoiquy():
    a=model.coef_
    b=model.intercept_
    messagebox.showinfo( "Phương trình hồi quy","PT hồi quy có dạng: y = "+str(a[0])+" * x1 + "+str(a[1])+" * x2 + "+str(a[2])+" * x3 +"+str(b))
tk.Button(master, 
          text='PT hồi quy', 
          command=pthoiquy).grid(row=4, 
                                    column=1, 
                                    sticky=tk.W,
                                    pady=4)    
def danhgia():
    #Predicting Y
    pred = model.predict(xtest)
    print("Normal predict",pred)
    print('RMSE for Multi Linear Regression: {}'.format(round(np.sqrt(mean_squared_error(ytest, pred)), 3)))
    bagged_regressor = BaggingRegressor(n_estimators=10,random_state=0)
    bagged_regressor.fit(xtrain, ytrain)
    X_train = np.array(xtrain).reshape((-1,3))
    X_test = np.array(xtest).reshape((-1,3))
    y_train = np.array(ytrain).reshape((-1,1))
    y_test = np.array(ytest).reshape((-1,1))
    bagged_predictions = bagged_regressor.predict(X_test)
    print("Bagging predict",bagged_predictions)
    print('RMSE for Bagged Multi Linear Regression: {}'.format(round(np.sqrt(mean_squared_error(ytest, bagged_predictions)), 3)))
    print('Difference in RMSE: {}'.format(round(round(np.sqrt(mean_squared_error(ytest, bagged_predictions)), 3) - round(np.sqrt(mean_squared_error(ytest, pred)), 3), 3)))
    # create a KFold object with 10 splits 
    folds = KFold(n_splits = 6, shuffle = True, random_state = 100)
    scores = cross_val_score(model, xtrain, ytrain,  cv=folds)
    print('Accuracy for K-fold Multi Linear Regression',scores.mean())  
tk.Button(master, 
          text='Đánh giá hiệu năng', 
          command=danhgia).grid(row=4, 
                                    column=2, 
                                    sticky=tk.W,
                                    pady=4) 
tk.Button(master, 
          text='Thoát', 
          command=master.quit).grid(row=4, 
                                    column=3, 
                                    sticky=tk.W,
                                    pady=4)

master.mainloop()
